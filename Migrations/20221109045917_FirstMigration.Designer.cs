// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using portfolio;

#nullable disable

namespace portfolio.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    [Migration("20221109045917_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("portfolio.Models.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Education", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("012573c5-95d7-477c-b6bc-65aa33eed87b"),
                            Institute = "Universidad Tecnologica Nacional",
                            IsActual = true,
                            Start = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TitleName = "Ingenieria en Sistemas de Informacion",
                            Type = 1,
                            UserId = new Guid("179bddbd-ce7b-4557-94d4-99a420b23e4b")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Education_Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Education_Description", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("34d07f34-8d5b-498d-a476-4009caec806f"),
                            Description = "No se que poner aca",
                            EducationId = new Guid("012573c5-95d7-477c-b6bc-65aa33eed87b"),
                            ProfileId = new Guid("341e92cd-1b0f-4361-8773-4a2c1b13c8cf")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experience", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e1f8b91-8240-49eb-953f-34ac20d08feb"),
                            Company = "Accusys",
                            IsActual = true,
                            Position = "Analista Programador Junior",
                            Start = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("179bddbd-ce7b-4557-94d4-99a420b23e4b")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Experience_Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Experience_Description", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("463f14e1-6269-4564-8bb7-35557b728d1e"),
                            Description = "No se que poner aca 2",
                            ExperienceId = new Guid("2e1f8b91-8240-49eb-953f-34ac20d08feb"),
                            ProfileId = new Guid("341e92cd-1b0f-4361-8773-4a2c1b13c8cf")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<bool>("ShowBanner")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhoto")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("341e92cd-1b0f-4361-8773-4a2c1b13c8cf"),
                            AboutMe = "Soy estudiante y programador. No se que mas poner salu2",
                            Description = "FullStack Developer || .NET + ANGULAR + SQL SERVER || Estudiante Ingeniería en Sistemas de Información en UTN",
                            LocationCountry = "Argentina",
                            LocationState = "Capital Federal",
                            ShowBanner = false,
                            ShowLocation = true,
                            ShowPhone = true,
                            ShowPhoto = false,
                            UserId = new Guid("179bddbd-ce7b-4557-94d4-99a420b23e4b")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cf4ab06-4291-4480-87b5-bc9690e9dbff"),
                            Name = "Portfolio",
                            Url = "https://www.google.com/",
                            UserId = new Guid("179bddbd-ce7b-4557-94d4-99a420b23e4b")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Project_Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Description", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11b73830-fde5-4e71-863a-ff00e3cafea7"),
                            Description = "No se que poner aca 3",
                            ProfileId = new Guid("341e92cd-1b0f-4361-8773-4a2c1b13c8cf"),
                            ProjectId = new Guid("3cf4ab06-4291-4480-87b5-bc9690e9dbff")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddc485a0-40f9-4eda-9374-abf5fe8d2f23"),
                            Name = "C#",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("fd806ee9-17d8-4a34-9f13-0bc96abb0988"),
                            Name = ".NET",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("636ceeec-2e41-4d5c-9c24-ff0cc49e9fa9"),
                            Name = ".NET WPF",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("49e693ad-5f1a-4b46-9c16-ebf6ae802bc3"),
                            Name = "Entity Framework",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("9f7c8d04-4d3f-4178-a1e1-7d5117b99fe4"),
                            Name = "Python",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("4bf709e4-0943-4795-a556-efd213040dfa"),
                            Name = "Java",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("2cc5017f-1791-442e-b696-a8609b6945f8"),
                            Name = "Java Spring",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("262fbd07-0eda-45bc-94df-b6d4f817455a"),
                            Name = "SQL",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("7c50337b-0123-4817-9296-993d6b487942"),
                            Name = "MS SQL Server",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f4545c94-5789-46a9-b56f-eb8ff454d9ff"),
                            Name = "MySql",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("aa1ff9a7-5a49-4c35-b144-d3a9001f5fab"),
                            Name = "HTML",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("7588dc0b-ca85-40e2-9aaf-fa194abb2136"),
                            Name = "CSS",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("3768c235-8b65-4979-8c22-f6cb3f6e5c99"),
                            Name = "Bootstrap",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("6f0a7575-5c61-4cfc-86f2-6b5a9e0395a0"),
                            Name = "JavaScript",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("36c25853-003e-4b6d-ba87-1c02b8f0d1ff"),
                            Name = "JavaScript",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f2c17292-0918-460b-b4f8-c112d1a7cda8"),
                            Name = "TypeScript",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("38e468b1-f0f2-4b9b-bd11-36d7ab8a9f26"),
                            Name = "TypeScript",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("3f89db3e-4a3d-4e26-b2d7-af1ca9f21ed6"),
                            Name = "Angular",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("18a95593-b682-4fee-be54-f1d09d238cad"),
                            Name = "React",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("3e667d06-810a-481d-8a8f-0dc8decc71be"),
                            Name = "Git",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("c0effba8-3cbf-4e07-891e-64266b379a6b"),
                            Name = "Scrum",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("d6626385-f711-4fd8-b15d-47621d82631b"),
                            Name = "ERD / DER",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("584d9d09-9774-4cbf-8976-48235a1319fc"),
                            Name = "UML",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("aa1792bd-8d18-4fb6-ac60-0de7194dea6e"),
                            Name = "JWT",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("293d7f9c-e690-46b0-b395-1a6e78565b59"),
                            Name = "Linux",
                            Type = 2
                        });
                });

            modelBuilder.Entity("portfolio.Models.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a7cf925-a986-402f-b071-9af97c4675ba"),
                            IconClassName = "bi bi-facebook",
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("2c45ad9d-e004-4794-95e6-12ad2ec8f137"),
                            IconClassName = "bi bi-whatsapp",
                            Name = "Whatsapp"
                        },
                        new
                        {
                            Id = new Guid("630b7386-3277-40cd-a351-2455518fb75f"),
                            IconClassName = "bi bi-github",
                            Name = "Github"
                        },
                        new
                        {
                            Id = new Guid("8d699d15-fffd-482b-a961-9da20435bdaf"),
                            IconClassName = "bi bi-instagram",
                            Name = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("f235ed99-b649-407a-8b4a-1b5bf9c397ee"),
                            IconClassName = "bi bi-linkedin",
                            Name = "LinkedIn"
                        },
                        new
                        {
                            Id = new Guid("6c5a5e1a-a263-47ef-845e-cee98ee0106a"),
                            IconClassName = "bi bi-twitter",
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = new Guid("637cea0e-f422-46d7-aae5-833b7d896982"),
                            IconClassName = "bi bi-youtube",
                            Name = "Youtube"
                        },
                        new
                        {
                            Id = new Guid("c1e31298-5fc3-464d-b3ff-38bb8f672ce2"),
                            IconClassName = "bi bi-person-circle",
                            Name = "Web Personal"
                        });
                });

            modelBuilder.Entity("portfolio.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("179bddbd-ce7b-4557-94d4-99a420b23e4b"),
                            Created = new DateTime(2022, 11, 9, 1, 59, 17, 128, DateTimeKind.Local).AddTicks(5327),
                            Email = "tiagoramirez2001@gmail.com",
                            Name = "Tiago Alberto Ramirez Marchisio",
                            Password = "9d1b8cbb1b368f7595dc0ec177a9415f1666beeb3bd3079b135559e58d523563499a1dc93eac521903b5bba6fc9fa63c01aab0a3037bc6af61c0c16c09fc2e74",
                            Role = "USR",
                            Status = true,
                            Username = "tiagoramirez"
                        });
                });

            modelBuilder.Entity("portfolio.Models.User_Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("60cf3cd7-2136-4955-9dfd-48e7cef6f322"),
                            Percentage = 90,
                            SkillId = new Guid("ddc485a0-40f9-4eda-9374-abf5fe8d2f23"),
                            UserId = new Guid("179bddbd-ce7b-4557-94d4-99a420b23e4b")
                        });
                });

            modelBuilder.Entity("portfolio.Models.User_SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("UserId");

                    b.ToTable("User_SocialMedia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5379019-b458-4c5d-8b26-507c750c73e5"),
                            SocialMediaId = new Guid("f235ed99-b649-407a-8b4a-1b5bf9c397ee"),
                            Url = "https://www.linkedin.com/in/tiagoramirezmar/",
                            UserId = new Guid("179bddbd-ce7b-4557-94d4-99a420b23e4b")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Education", b =>
                {
                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Education_Description", b =>
                {
                    b.HasOne("portfolio.Models.Education", "Education")
                        .WithMany("Descriptions")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("portfolio.Models.Profile", "Profile")
                        .WithMany("EducationDescriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("portfolio.Models.Experience", b =>
                {
                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Experience_Description", b =>
                {
                    b.HasOne("portfolio.Models.Experience", "Experience")
                        .WithMany("Descriptions")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("portfolio.Models.Profile", "Profile")
                        .WithMany("ExperienceDescriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("portfolio.Models.Profile", b =>
                {
                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Project", b =>
                {
                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Project_Description", b =>
                {
                    b.HasOne("portfolio.Models.Profile", "Profile")
                        .WithMany("ProjectDescriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.Project", "Project")
                        .WithMany("Descriptions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("portfolio.Models.User_Skill", b =>
                {
                    b.HasOne("portfolio.Models.Skill", "Skill")
                        .WithMany("User_Skills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.User_SocialMedia", b =>
                {
                    b.HasOne("portfolio.Models.SocialMedia", "SocialMedia")
                        .WithMany("User_SocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Education", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("portfolio.Models.Experience", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("portfolio.Models.Profile", b =>
                {
                    b.Navigation("EducationDescriptions");

                    b.Navigation("ExperienceDescriptions");

                    b.Navigation("ProjectDescriptions");
                });

            modelBuilder.Entity("portfolio.Models.Project", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("portfolio.Models.Skill", b =>
                {
                    b.Navigation("User_Skills");
                });

            modelBuilder.Entity("portfolio.Models.SocialMedia", b =>
                {
                    b.Navigation("User_SocialMedias");
                });

            modelBuilder.Entity("portfolio.Models.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Profiles");

                    b.Navigation("Projects");

                    b.Navigation("Skills");

                    b.Navigation("SocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
