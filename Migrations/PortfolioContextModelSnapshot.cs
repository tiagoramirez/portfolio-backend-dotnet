// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using portfolio;

#nullable disable

namespace portfolio.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    partial class PortfolioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("portfolio.Models.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Education", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8f98496-02c6-40a1-9170-e11cf13895f3"),
                            Institute = "Universidad Tecnologica Nacional",
                            IsActual = true,
                            Start = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TitleName = "Ingenieria en Sistemas de Informacion",
                            Type = 1,
                            UserId = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Education_Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Education_Description", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c700f39a-3601-42a2-a3fc-9a8e33a89dc3"),
                            Description = "No se que poner aca",
                            EducationId = new Guid("b8f98496-02c6-40a1-9170-e11cf13895f3"),
                            ProfileId = new Guid("a0a12631-8100-461a-a899-317b8befab32")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experience", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9b2058b-604d-4b92-b9f9-8d1712034eb7"),
                            Company = "Accusys",
                            IsActual = true,
                            Position = "Analista Programador Junior",
                            Start = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0,
                            UserId = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Experience_Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Experience_Description", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5de045d-4fd9-4d06-b3e1-98fb54266ab5"),
                            Description = "No se que poner aca 2",
                            ExperienceId = new Guid("d9b2058b-604d-4b92-b9f9-8d1712034eb7"),
                            ProfileId = new Guid("a0a12631-8100-461a-a899-317b8befab32")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<Guid>("ProfileConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileConfigId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0a12631-8100-461a-a899-317b8befab32"),
                            AboutMe = "Soy estudiante y programador. No se que mas poner salu2",
                            Description = "FullStack Developer || .NET + ANGULAR + SQL SERVER || Estudiante Ingeniería en Sistemas de Información en UTN",
                            LocationCountry = "Argentina",
                            LocationState = "Capital Federal",
                            ProfileConfigId = new Guid("bdb6e2ce-da11-4d98-bbca-ef8908d64c5c"),
                            UserId = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043")
                        });
                });

            modelBuilder.Entity("portfolio.Models.ProfileConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowBanner")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhoto")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProfileConfig", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdb6e2ce-da11-4d98-bbca-ef8908d64c5c"),
                            ProfileId = new Guid("a0a12631-8100-461a-a899-317b8befab32"),
                            ShowBanner = true,
                            ShowLocation = true,
                            ShowPhone = true,
                            ShowPhoto = true
                        });
                });

            modelBuilder.Entity("portfolio.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("55dd3f35-1054-4d79-a3f5-fe4233a6dadb"),
                            Name = "Portfolio",
                            Url = "https://www.google.com/",
                            UserId = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Project_Description", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Description", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d81ba0f0-3c8d-44e9-81ba-86531ee21ae3"),
                            Description = "No se que poner aca 3",
                            ProfileId = new Guid("a0a12631-8100-461a-a899-317b8befab32"),
                            ProjectId = new Guid("55dd3f35-1054-4d79-a3f5-fe4233a6dadb")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4476cc3-bee6-4d16-a693-9b07571562d3"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b022bf32-80bc-420c-afaa-1d19d698d265"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("portfolio.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("302f56b3-1e5c-46be-83d9-40c8452acb4e"),
                            Name = "C#",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("3c4706c3-93a8-47fc-9494-582715a91fbe"),
                            Name = ".NET",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("7fd68f22-5269-47c9-8d54-8bd04cee5876"),
                            Name = ".NET WPF",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("1cb5222f-662e-4872-ac0f-97cd6c33c1d1"),
                            Name = "Entity Framework",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("a22cce13-3a6a-44ca-be77-f3bb48992043"),
                            Name = "Python",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f23cafc1-fadc-4a17-b140-fcd5fae845c4"),
                            Name = "Java",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("7577131d-3c6f-4dfe-b141-459d9f0a1d5b"),
                            Name = "Java Spring",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("59bed9bc-1fc4-48ce-810f-4b3d1a500ccd"),
                            Name = "SQL",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("53a11c6d-4d99-4ff9-b929-f25823c77ee5"),
                            Name = "MS SQL Server",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("814824ac-7ddf-41c4-b999-421e458a6d66"),
                            Name = "MySql",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("b8b2012f-aae4-4df9-b679-54133b7a2c57"),
                            Name = "HTML",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("b0efdce6-be60-4c30-ac81-2436ce690868"),
                            Name = "CSS",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("483504cd-ae60-4202-b650-a2e2c2e677d6"),
                            Name = "Bootstrap",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("937df4ec-e0c8-488a-b99c-de58fb783e08"),
                            Name = "JavaScript",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("6271de2b-d86a-478f-a197-8cc5ae88e80a"),
                            Name = "JavaScript",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("af14652c-925c-4130-8664-d341d1048bf7"),
                            Name = "TypeScript",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("29d374f2-6767-428f-ba99-8eb82a621567"),
                            Name = "TypeScript",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("cdfaae3a-c1ef-47df-924c-a78fda04fa9e"),
                            Name = "Angular",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("240a322f-a03a-4c50-ae8e-7d718ae75c89"),
                            Name = "React",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d5e64e12-5157-4478-98d6-47f8c3f84260"),
                            Name = "Git",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("350cd918-5cb2-43e3-a46c-dc9545a8ecc2"),
                            Name = "Scrum",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("d7df352e-1ea0-4b0b-a358-b9e0284c4148"),
                            Name = "ERD / DER",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("42712e8d-6b8e-45ef-ac26-3715a03fbffe"),
                            Name = "UML",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("641b2819-d127-4937-beaf-c47e41aaf9d2"),
                            Name = "JWT",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("b5ee8a8e-c7ed-45cd-8115-3e2ef6b3c711"),
                            Name = "Linux",
                            Type = 2
                        });
                });

            modelBuilder.Entity("portfolio.Models.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44431256-3806-4e57-b5bd-6f44bc9fa373"),
                            IconClassName = "bi bi-facebook",
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("f047df25-d206-4e5d-ab0d-a3de39b13885"),
                            IconClassName = "bi bi-whatsapp",
                            Name = "Whatsapp"
                        },
                        new
                        {
                            Id = new Guid("0c24eb93-87d7-44e6-864b-3d6972c31207"),
                            IconClassName = "bi bi-github",
                            Name = "Github"
                        },
                        new
                        {
                            Id = new Guid("42fe74e3-93c7-4066-b56f-4d3c29afdad8"),
                            IconClassName = "bi bi-instagram",
                            Name = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("7dc7c297-ee06-4c45-bb23-233a8bab6dc5"),
                            IconClassName = "bi bi-linkedin",
                            Name = "LinkedIn"
                        },
                        new
                        {
                            Id = new Guid("30fc334d-171b-4c32-839b-5ec821206918"),
                            IconClassName = "bi bi-twitter",
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = new Guid("0b393e67-1963-4e29-98e0-8e964d71e35f"),
                            IconClassName = "bi bi-youtube",
                            Name = "Youtube"
                        },
                        new
                        {
                            Id = new Guid("1640b025-e825-4a42-8f26-eaf7fb8846bc"),
                            IconClassName = "bi bi-person-circle",
                            Name = "Web Personal"
                        });
                });

            modelBuilder.Entity("portfolio.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043"),
                            Created = new DateTime(2022, 11, 5, 17, 31, 39, 99, DateTimeKind.Local).AddTicks(811),
                            Email = "tiagoramirez2001@gmail.com",
                            Name = "Tiago Alberto Ramirez Marchisio",
                            Password = "9d1b8cbb1b368f7595dc0ec177a9415f1666beeb3bd3079b135559e58d523563499a1dc93eac521903b5bba6fc9fa63c01aab0a3037bc6af61c0c16c09fc2e74",
                            Status = true,
                            Username = "tiagoramirez"
                        });
                });

            modelBuilder.Entity("portfolio.Models.User_Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e6aa0f3-3850-4475-a208-255b44d8b869"),
                            RoleId = new Guid("b022bf32-80bc-420c-afaa-1d19d698d265"),
                            UserId = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043")
                        });
                });

            modelBuilder.Entity("portfolio.Models.User_Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc9fccce-5f16-43c4-ac03-fa07d3f4e4ee"),
                            Percentage = 90,
                            SkillId = new Guid("302f56b3-1e5c-46be-83d9-40c8452acb4e"),
                            UserId = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043")
                        });
                });

            modelBuilder.Entity("portfolio.Models.User_SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("UserId");

                    b.ToTable("User_SocialMedia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0db0d442-a207-4c4c-b1d5-c57f996b9253"),
                            SocialMediaId = new Guid("7dc7c297-ee06-4c45-bb23-233a8bab6dc5"),
                            Url = "https://www.linkedin.com/in/tiagoramirezmar/",
                            UserId = new Guid("3f3a9ce6-d6ad-475b-9aac-eda285e24043")
                        });
                });

            modelBuilder.Entity("portfolio.Models.Education", b =>
                {
                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Education_Description", b =>
                {
                    b.HasOne("portfolio.Models.Education", "Education")
                        .WithMany("Descriptions")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("portfolio.Models.Profile", "Profile")
                        .WithMany("EducationDescriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("portfolio.Models.Experience", b =>
                {
                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Experience_Description", b =>
                {
                    b.HasOne("portfolio.Models.Experience", "Experience")
                        .WithMany("Descriptions")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("portfolio.Models.Profile", "Profile")
                        .WithMany("ExperienceDescriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("portfolio.Models.Profile", b =>
                {
                    b.HasOne("portfolio.Models.ProfileConfig", "Config")
                        .WithOne("Profile")
                        .HasForeignKey("portfolio.Models.Profile", "ProfileConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Project", b =>
                {
                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Project_Description", b =>
                {
                    b.HasOne("portfolio.Models.Profile", "Profile")
                        .WithMany("ProjectDescriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.Project", "Project")
                        .WithMany("Descriptions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("portfolio.Models.User_Role", b =>
                {
                    b.HasOne("portfolio.Models.Role", "Role")
                        .WithMany("User_Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.User_Skill", b =>
                {
                    b.HasOne("portfolio.Models.Skill", "Skill")
                        .WithMany("User_Skills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.User_SocialMedia", b =>
                {
                    b.HasOne("portfolio.Models.SocialMedia", "SocialMedia")
                        .WithMany("User_SocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portfolio.Models.User", "User")
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portfolio.Models.Education", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("portfolio.Models.Experience", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("portfolio.Models.Profile", b =>
                {
                    b.Navigation("EducationDescriptions");

                    b.Navigation("ExperienceDescriptions");

                    b.Navigation("ProjectDescriptions");
                });

            modelBuilder.Entity("portfolio.Models.ProfileConfig", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("portfolio.Models.Project", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("portfolio.Models.Role", b =>
                {
                    b.Navigation("User_Roles");
                });

            modelBuilder.Entity("portfolio.Models.Skill", b =>
                {
                    b.Navigation("User_Skills");
                });

            modelBuilder.Entity("portfolio.Models.SocialMedia", b =>
                {
                    b.Navigation("User_SocialMedias");
                });

            modelBuilder.Entity("portfolio.Models.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Profiles");

                    b.Navigation("Projects");

                    b.Navigation("Roles");

                    b.Navigation("Skills");

                    b.Navigation("SocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
